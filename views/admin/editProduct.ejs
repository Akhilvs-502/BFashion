<%- include('../partials/adminHeader.ejs') %>
  <!-- Add Cropper.js CDN -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <script src="https://unpkg.com/cropperjs/dist/cropper.min.js"></script>

  <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script> -->

  <section class="flex">

    <%- include('../partials/adminSlideBar.ejs') %>
      <div class=" my-auto mx-auto w-6/12">

        <form id="productForm" enctype="multipart/form-data">
          <div class="flex gap-x-6 mb-6">
            <div class="w-full relative">
              <label class="flex  items-center mb-2 text-gray-600 text-sm font-medium">Product Name <svg width="7"
                  height="7" class="ml-1" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                    fill="#EF4444" />
                </svg>
              </label>
              <input value="<%= product.productName %>" type="text" id="productname"
                class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none "
                placeholder="" required="">
            </div>
            <div class="w-full relative">
              <label class="flex  items-center mb-2 text-gray-600 text-sm font-medium">Price in Rupee <svg width="7"
                  height="7" class="ml-1" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                    fill="#EF4444" />
                </svg>
              </label>
              <input value="<%= product.price %>" type="text" id="price"
                class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none "
                placeholder="" required="">
            </div>
          </div>


          <div class="flex gap-x-6 mb-6">
            <div class="w-full relative">
              <label class="flex  items-center mb-2 text-gray-600 text-sm font-medium">Description <svg width="7"
                  height="7" class="ml-1" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                    fill="#EF4444" />
                </svg>
              </label>
              <input value="<%= product.description %>" type="text" id="description"
                class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none "
                placeholder="" required="">
            </div>
            <div class="w-full relative">
              <label class="flex items-center mb-2 text-gray-600 text-sm font-medium">
                Category <svg width="7" height="7" class="ml-1" viewBox="0 0 7 7" fill="none"
                  xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                    fill="#EF4444" />
                </svg>
              </label>
              <select id="category"
                class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full focus:outline-none">
                <option value="" disabled selected>Select a category</option>

                <%categories.forEach(category=>{ %>
                  <option value="<%=category.categoryName %>" <%=category.categoryName===product.category ? 'selected'
                    : '' %> > <%=category.categoryName %>
                  </option>
                  <%}) %>

              </select>
            </div>



          </div>




          <div class="flex gap-x-6 mb-6">
            <div class="w-full relative">
              <label class="flex  items-center mb-2 text-gray-600 text-sm font-medium">Discount in percentage <svg
                  width="7" height="7" class="ml-1" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                    fill="#EF4444" />
                </svg>
              </label>
              <input value="<%= product.discount %>" type="text" id="discount"
                class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none "
                placeholder="" required="">
            </div>
            <div class="w-full relative">
              <label class="flex  items-center mb-2 text-gray-600 text-sm font-medium">Stock <svg width="7" height="7"
                  class="ml-1" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                    fill="#EF4444" />
                </svg>
              </label>
              <input value="<%= product.stock %>" type="text" id="stock"
                class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none "
                placeholder="" required="">
            </div>
          </div>
          <div class="flex gap-x-6 mb-6">
            <div class="w-full relative">
              <label class="flex  items-center mb-2 text-gray-600 text-sm font-medium">Color <svg width="7" height="7"
                  class="ml-1" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                    fill="#EF4444" />
                </svg>
              </label>
              <input value="<%= product.color %>" type="text" id="color"
                class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none "
                placeholder="" required="">
            </div>
            <!-- /////////////////////////////////// -->

            <div class="w-full relative">
              <label class="flex items-center mb-2 text-gray-600 text-sm font-medium">
                Size
                <svg width="7" height="7" class="ml-1" viewBox="0 0 7 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path
                    d="M3.11222 6.04545L3.20668 3.94744L1.43679 5.08594L0.894886 4.14134L2.77415 3.18182L0.894886 2.2223L1.43679 1.2777L3.20668 2.41619L3.11222 0.318182H4.19105L4.09659 2.41619L5.86648 1.2777L6.40838 2.2223L4.52912 3.18182L6.40838 4.14134L5.86648 5.08594L4.09659 3.94744L4.19105 6.04545H3.11222Z"
                    fill="#EF4444" />
                </svg>
              </label>

              <% product.size.forEach((value)=>{%>


                <!-- Container for size inputs -->
                <div id="sizes-container">
                  <div class="size-input-group">
                    <input value="<%=value %>" type="text" name="sizes[]"
                      class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none"
                      placeholder="Enter size" required="">
                    <button type="button" class="remove-size text-red-500 ml-2">Remove</button>
                  </div>
                </div>


                <%})%>





                  <!-- Button to add more sizes -->
                  <button type="button" id="add-size" class="mt-2 px-3 py-1 text-white bg-green-500 rounded-full">Add
                    Size</button>
            </div>

            <!-- ////////////////////////////////////////////////// -->
          </div>
          <p id="errMsg" class="text-red-500"></p>






          <!-- ///////////////////////////////////////////////// -->

          <!-- <form id="productForm" enctype="multipart/form-data"> -->
          <!-- <label for="imageUpload">Upload Image (One by one, minimum 3):</label>
  <input type="file" id="imageUpload" accept="image/*">
  <div id="imagePreview"></div> <!-- Container to show cropped images -->

          <!-- Modal for cropping -->
          <!-- <div id="cropModal" style="display:none;">
      <img id="cropImage" src="" alt="Image to Crop">
      <button id="cropButton">Crop</button>
      <button id="cancelButton">Cancel</button>
  </div> -->
          <!-- <button type="submit">Submit Product</button> -->
          <!-- </form> -->





          <label for="imageUpload" class="text-base text-gray-500 font-semibold mb-2 block">Upload file</label>
          <input type="file" multiple id="imageUpload" accept="image/*"
            class="w-full text-gray-400 font-semibold text-sm bg-white border file:cursor-pointer cursor-pointer file:border-0 file:py-3 file:px-4 file:mr-4 file:bg-gray-100 file:hover:bg-gray-200 file:text-gray-500 rounded" />
          <p class="text-xs text-gray-400 mt-2">PNG, JPG SVG, WEBP, and GIF are Allowed.</p>

          <div class="flex px-4" id="imagePreview"></div> <!-- Container to show cropped images -->

          <!-- Modal for cropping -->
          <div id="cropModal" style="display:none;">
            <img id="cropImage" src="" alt="Image to Crop">
            <button id="cropButton" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"">Crop</button>
      <button id="cancelButton"
              class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">Cancel</button>
          </div>






          <!-- ///////////////////////////////////// -->















          <button type="submit"
            class="w-52 h-12 shadow-sm rounded-full bg-indigo-600 hover:bg-indigo-800 transition-all duration-700 text-white text-base font-semibold leading-7">Submit</button>
        </form>

      </div>


  </section>


  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://unpkg.com/cropperjs/dist/cropper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script>



    //ADDING THE SIZE BUTTON////////////////////////////////////////////////////




    // Get elements
    const sizesContainer = document.getElementById('sizes-container');
    const addSizeButton = document.getElementById('add-size');

    // Function to add a new size input
    addSizeButton.addEventListener('click', () => {
      const sizeInputGroup = document.createElement('div');
      sizeInputGroup.classList.add('size-input-group');
      sizeInputGroup.innerHTML = `
      <input type="text" name="sizes[]" class="block w-full h-11 px-5 py-2.5 bg-white leading-7 text-base font-normal shadow-xs text-gray-900 bg-transparent border border-gray-300 rounded-full placeholder-gray-400 focus:outline-none" placeholder="Enter size" required="">
      <button type="button" class="remove-size text-red-500 ml-2">Remove</button>
    `;
      sizesContainer.appendChild(sizeInputGroup);

      // Add event listener to the remove button
      sizeInputGroup.querySelector('.remove-size').addEventListener('click', () => {
        sizeInputGroup.remove();
      });
    });

    // Initial remove button functionality for the first input
    document.querySelectorAll('.remove-size').forEach(button => {
      button.addEventListener('click', (e) => {
        e.target.closest('.size-input-group').remove();
      });
    });



    ////////////////////////////////////////////////////////////////////

    window.onload = function () {
      const productImages = <%- JSON.stringify(product.images) %>
        console.log(productImages);

      productImages.forEach((url) => {
        console.log(url);

        addCroppedImagePreview(url)

      })
    }





    /////////////////////////////////////////////////////////////////


    const imageInput = document.getElementById('imageUpload');
    const imagePreview = document.getElementById('imagePreview');
    const cropModal = document.getElementById('cropModal');
    const cropImage = document.getElementById('cropImage');
    const cropButton = document.getElementById('cropButton');
    const cancelButton = document.getElementById('cancelButton');

    let cropper;
    let uploadedImages = 0;

    imageInput.addEventListener('change', function (event) {
      if (this.files.length === 1) {
        const file = this.files[0];
        const reader = new FileReader();
        reader.onload = function (e) {
          openCropModal(e.target.result);
        };
        reader.readAsDataURL(file);
      }
    });

    function openCropModal(imageUrl) {
      cropImage.src = imageUrl;
      cropModal.style.display = 'block';
      cropper = new Cropper(cropImage, {
        aspectRatio: 1,
        viewMode: 1
      });
    }

    cropButton.addEventListener('click', function () {
      const croppedCanvas = cropper.getCroppedCanvas();

      // Convert the cropped canvas to a Blob
      croppedCanvas.toBlob(function (blob) {
        const formData = new FormData();
        formData.append('croppedImage', blob, 'cropped.jpg');

        // Send the Blob to the server using fetch
        axios.post('/admin/uploadImage', formData).then(res => {
          console.log(res.data);
          if (res.data.success) {
            addCroppedImagePreview(res.data.imageUrl);
          } else {
            Swal.fire({
       icon: "error",
        title: "Oops...",
      text: "image upload failed!"
});
            // alert('Image upload failed.');
            // addCroppedImagePreview(croppedCanvas.toDataURL('image/jpeg'));
          }
        })
          .catch(error => {
            console.error('Error:', error);
          });
      }, 'image/jpeg');

      cropModal.style.display = 'none';
      cropper.destroy();
    });

    cancelButton.addEventListener('click', function () {
      cropModal.style.display = 'none';
      cropper.destroy();
    });

    // Declare an array to store image URLs
    let imageSrcArray = [];

    function addCroppedImagePreview(imageSrc) {
      const croppedImageContainer = document.createElement('div');
      croppedImageContainer.classList.add('image-container', 'relative', 'mr-4', 'mb-4');

      const croppedImage = document.createElement('img');
      croppedImage.src = imageSrc;
      croppedImage.classList.add('w-24', 'h-24', 'rounded', 'shadow-md');
      croppedImageContainer.appendChild(croppedImage);

      const removeButton = document.createElement('button');
      removeButton.textContent = 'Remove';
      removeButton.classList.add('absolute', 'top-0', 'right-0', 'bg-red-500', 'hover:bg-red-700', 'text-white', 'font-bold', 'py-1', 'px-2', 'rounded-full', 'm-2', 'text-xs');
      croppedImageContainer.appendChild(removeButton);

      imagePreview.appendChild(croppedImageContainer);

      // Add the image source to the array
      imageSrcArray.push(imageSrc);


      removeButton.addEventListener('click', function () {
        imagePreview.removeChild(croppedImageContainer);
        uploadedImages--;
        imageInput.disabled = false;

        // Remove the image source from the array
        const index = imageSrcArray.indexOf(imageSrc);
        if (index > -1) {
          imageSrcArray.splice(index, 1); // Remove the image URL from the array
        }
      });

      uploadedImages++;
      checkMinimumImages();

    }

    function checkMinimumImages() {
      if (uploadedImages >= 3) {
        imageInput.disabled = true;

      } else {
        imageInput.value = "";
      }
    }







    function validateProductForm() {
      const productName = document.getElementById('productname').value.trim();
      const price = document.getElementById('price').value.trim();
      const description = document.getElementById('description').value.trim();
      // const quantity = document.getElementById('quantity').value.trim();
      const discount = document.getElementById('discount').value.trim();
      const stock = document.getElementById('stock').value.trim();
      const color = document.getElementById('color').value.trim();
      const category = document.getElementById('category').value.trim();
      // const size = document.getElementById('size').value.trim();
      //geting the size
      const sizes = Array.from(document.querySelectorAll('input[name="sizes[]"]')).map(input => input.value);

      // Clear previous error messages
      const errshow = document.getElementById('errMsg');
      errshow.innerHTML = '';

      // Validate Product Name
      const productNameRegex = /^[A-Za-z]/; // Starts with a letter
      if (!productNameRegex.test(productName)) {
        errshow.innerHTML = "Product name must start with a letter.";
        return false; // Validation failed
      }

      // Validate Price
      if (isNaN(price) || parseFloat(price) < 0) {
        errshow.innerHTML = "Price must be a positive number.";
        return false; // Validation failed
      }

      // Validate Quantity
      // if (!Number.isInteger(Number(quantity)) || Number(quantity) <= 0) {
      //     errshow.innerHTML = "Quantity must be a positive integer.";
      //     return false; // Validation failed
      // }

      // Validate Discount
      if (isNaN(discount) || parseFloat(discount) < 0 || parseFloat(discount) > 100) {
        errshow.innerHTML = "Discount must be a number between 0 and 100.";
        return false; // Validation failed
      }

      // Validate Stock
      if (!Number.isInteger(Number(stock)) || Number(stock) < 0) {
        errshow.innerHTML = "Stock must be a non-negative integer.";
        return false; // Validation failed
      }
      if (!category) {
        errshow.innerHTML = "Select any category";
        return false; // Validation failed
      }

      // Clear error messages and return success if all checks pass
      errshow.innerHTML = "Validation successful";
      return true; // Validation passed
    }




    document.getElementById('productForm').addEventListener('submit', function (event) {
      event.preventDefault();
      if (uploadedImages < 3) {
        const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.onmouseenter = Swal.stopTimer;
          toast.onmouseleave = Swal.resumeTimer;
        }
      });
      Toast.fire({
        icon: "error",
        title: "Please upload at least 3 images"
      });

      }
      const isValid = validateProductForm();
      if (isValid && uploadedImages > 2) {
        // Proceed with form submission or further processing
        const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.onmouseenter = Swal.stopTimer;
          toast.onmouseleave = Swal.resumeTimer;
        }
      });
      Toast.fire({
        icon: "success",
        title: "Form is valid, proceeding with submission."
      });

        const productName = document.getElementById('productname').value.trim();
        const price = document.getElementById('price').value.trim();
        const description = document.getElementById('description').value.trim();
        // const quantity = document.getElementById('quantity').value.trim();
        const discount = document.getElementById('discount').value.trim();
        const stock = document.getElementById('stock').value.trim();
        const color = document.getElementById('color').value.trim();
        // const size = document.getElementById('size').value.trim();
        const category = document.getElementById('category').value.trim();
        //geting the size
        const sizeInputs = document.querySelectorAll('input[name="sizes[]"]');
        console.log(sizeInputs);  // This should log a NodeList of input elements

        const sizes = Array.from(document.querySelectorAll('input[name="sizes[]"]')).map(input => input.value);
        const productID = <%- JSON.stringify(product._id) %>

          axios.post('/admin/postEditProduct', {
            productID, productName, price, description, discount, stock, color,
            size: sizes, category,
            images: imageSrcArray  // Include the image URLs
          })
            .then(data => {
              console.log(data);
              setTimeout(()=>{
            window.location.href = "/admin/productlist"
              },2000)

            }).catch(data => {
              console.log(data);
            })
      }



    });
  </script>