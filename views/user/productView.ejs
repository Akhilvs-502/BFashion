<style>
  /* * {box-sizing: border-box;} */

  .img-zoom-container {
    position: relative;
  }

  .img-zoom-lens {
    position: absolute;
    border: 1px solid #d4d4d4;
    /*set the size of the lens:*/
    width: 80px;
    height: 80px;
  }

  .img-zoom-result {
    border: 0px solid #d4d4d4;
    /*set the size of the result div:*/
    width: 400px;
    height: 400px;
  }
</style>



<%- include('../partials/header') %>



  <!-- Breadcrumb -->
  <div class="flex ml-1">

    <ul class="flex items-center justify-center font-[sans-serif] space-x-4 mt-4">
      <a href="/user/home">
        <li class="text-gray-500 text-base cursor-pointer">
          Home
        </li>
      </a>
      <li>
        <svg xmlns="http://www.w3.org/2000/svg" class="fill-gray-400 w-3.5 -rotate-90" viewBox="0 0 24 24">
          <path fill-rule="evenodd"
            d="M11.99997 18.1669a2.38 2.38 0 0 1-1.68266-.69733l-9.52-9.52a2.38 2.38 0 1 1 3.36532-3.36532l7.83734 7.83734 7.83734-7.83734a2.38 2.38 0 1 1 3.36532 3.36532l-9.52 9.52a2.38 2.38 0 0 1-1.68266.69734z"
            clip-rule="evenodd" data-original="#000000"></path>
        </svg>
      </li>
      <a href="/user/allProducts">
        <li class="text-gray-500 text-base cursor-pointer">
          All product
        </li>
      </a>
      <li>
        <svg xmlns="http://www.w3.org/2000/svg" class="fill-gray-400 w-3.5 -rotate-90" viewBox="0 0 24 24">
          <path fill-rule="evenodd"
            d="M11.99997 18.1669a2.38 2.38 0 0 1-1.68266-.69733l-9.52-9.52a2.38 2.38 0 1 1 3.36532-3.36532l7.83734 7.83734 7.83734-7.83734a2.38 2.38 0 1 1 3.36532 3.36532l-9.52 9.52a2.38 2.38 0 0 1-1.68266.69734z"
            clip-rule="evenodd" data-original="#000000"></path>
        </svg>
      </li>
      <li class="text-gray-800 text-base font-bold cursor-pointer">
        <%= product.productName %>
      </li>
    </ul>

  </div>












  <div class="font-sans">
    <div class="p-4 lg:max-w-5xl max-w-lg mx-auto">
      <div class="grid items-start grid-cols-1 lg:grid-cols-2 gap-6 max-lg:gap-12">
        <!-- Left side: Images -->
        <div class="w-full lg:sticky top-0 sm:flex gap-2">
          <!-- Thumbnail Images -->
          <div class="sm:space-y-3 w-16 max-sm:w-12 max-sm:flex max-sm:mb-4 max-sm:gap-4">
            <img src="<%=product.images[0] %>" alt="Product1"
              class="w-full cursor-pointer rounded-md outline product-thumb" />
            <img src="<%=product.images[1] %>" class="w-full cursor-pointer rounded-md product-thumb" />
            <img src="<%=product.images[2] %>" class="w-full cursor-pointer rounded-md product-thumb" />
            <img src="<%=product.images[3] %>" class="w-full cursor-pointer rounded-md product-thumb" />
          </div>
          <!-- Main Image -->
          <div class="flex  img-zoom-container" id="img-zoom-container">
            <img id="mainImage" src="<%=product.images[0] %>" alt="Product" class="w-4/5 rounded-md object-cover" />
            <div id="myresult"  class="img-zoom-result md:ml-96 absolute hidden "></div>
          </div>

        </div>



        <% const originalPrice=product.price; %>
          <% const discountPercentage=product.discount; %>
            <% const discountAmount=(originalPrice * (discountPercentage / 100)).toFixed(2); %>
              <% const discountedPrice=(originalPrice - discountAmount).toFixed(2); %>

                <!-- Right side: Product details -->
                <div>
                  <div class="flex justify-between">
                    <div>
                      <h2 class="text-2xl font-bold text-gray-800">
                        <%=product.productName %>
                      </h2>
                    </div>
                    <div>
                      <div class="flex  justify-end">

                        <!-- <svg xmlns="http://www.w3.org/2000/svg" width="32px" class="fill-gray-800 inline-block"
                          viewBox="0 0 64 64">
                          <path
                            d="M45.5 4A18.53 18.53 0 0 0 32 9.86 18.5 18.5 0 0 0 0 22.5C0 40.92 29.71 59 31 59.71a2 2 0 0 0 2.06 0C34.29 59 64 40.92 64 22.5A18.52 18.52 0 0 0 45.5 4ZM32 55.64C26.83 52.34 4 36.92 4 22.5a14.5 14.5 0 0 1 26.36-8.33 2 2 0 0 0 3.27 0A14.5 14.5 0 0 1 60 22.5c0 14.41-22.83 29.83-28 33.14Z"
                            data-original="#000000"></path>
                        </svg> -->
    
                      </div>
    
                    </div>
                  </div>
                  
                  <div class="flex flex-wrap gap-4 mt-4">
                    <p class="text-gray-800 text-xl font-bold">₹<%= discountedPrice %>
                    </p>
                    <p class="text-red-400 text-xl "><strike>₹<%=product.price %></strike></p> 
                    <p class="text-red-800 text-xl ">(<%=product.discount %>%)</p> 
                  </div>
                  <span class="text-sm text-green-500 ml-1.5">inclusive of all taxes</span>

                  <!-- Sizes from variants -->
                  <div class="mt-3 flex ">
                    <h3 class="text-base font-medium text-gray-800 mt-2">Sizes</h3>
                    <div class="flex flex-wrap gap-4 ml-3" id="sizesContainer">
                      <% const variantSizes = [...new Set((product.variants || []).map(v => v.size))]; %>
                      <% variantSizes.forEach((size) => { %>
                        <label class="cursor-pointer">
                          <input type="radio" name="selectedSize" value="<%= size %>" class="hidden peer select" />
                          <div class="w-10 h-10 border-2 font-semibold text-sm rounded-full flex items-center justify-center shrink-0 peer-checked:bg-blue-600 peer-checked:text-white peer-checked:border-blue-600">
                            <%= size %>
                          </div>
                        </label>
                      <% }) %>
                      <p class="text-red-400" id="selectErr"></p>
                    </div>
                  </div>
                  <!-- Colors from variants -->
                  <div class="mt-2 flex items-center">
                    <p class="text-base font-medium text-gray-800 mr-2">Colors</p>
                    <div id="colorsContainer" class="flex gap-2">
                      <% const variantColors = [...new Set((product.variants || []).map(v => v.color))]; %>
                      <% variantColors.forEach((color) => { %>
                        <button type="button" data-color="<%= color %>" class="variant-color px-3 py-2 border rounded-full text-sm">
                          <%= color %>
                        </button>
                      <% }) %>
                    </div>
                  </div>
                  <p id="variantStockMsg" class="mt-2 text-sm font-medium"></p>
                  <div class="mt-3 ">
                    <p class="text-base font-medium text-gray-800">Available offers</p>
                        <p class="text-green-500 mt-1">  <%=offer && offer.length===0 ? "No offer available right now" :"" %></p>
                    <% offer.forEach((item)=>{%> 
                      <div class="flex">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 70" width="25" height="25">
                          <!-- Green price tag shape -->
                          <polygon points="10,5 40,5 45,10 45,60 10,60 5,55 5,15" fill="#28a745"/>
                          <!-- Hole for the price tag string -->
                          <circle cx="25" cy="10" r="3" fill="white"/>
                          <!-- Text inside the price tag -->
                          <text x="25" y="40" font-family="Arial, sans-serif" font-size="12" fill="white" text-anchor="middle" alignment-baseline="middle">
                            offer
                          </text>
                        </svg>
                        <p class="text-green-500 mt-1 ml-2 text-sm">  <%=item.title%> (<%=item.discountValue%>  <%=item.offerType=="price" ? "rs" :"%"%>)</p>
                       </div>
                      
                      <%})%>
           
                  
                    
                    
                  </div>

              
                  <!-- ////RATING -->


                  <div class="flex justify-end space-x-2">
                    <svg class="w-6 fill-[#facc15]" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path
                        d="M7 0L9.4687 3.60213L13.6574 4.83688L10.9944 8.29787L11.1145 12.6631L7 11.2L2.8855 12.6631L3.00556 8.29787L0.342604 4.83688L4.5313 3.60213L7 0Z" />
                    </svg>
                    <svg class="w-6 fill-[#facc15]" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path
                        d="M7 0L9.4687 3.60213L13.6574 4.83688L10.9944 8.29787L11.1145 12.6631L7 11.2L2.8855 12.6631L3.00556 8.29787L0.342604 4.83688L4.5313 3.60213L7 0Z" />
                    </svg>
                    <svg class="w-6 fill-[#facc15]" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path
                        d="M7 0L9.4687 3.60213L13.6574 4.83688L10.9944 8.29787L11.1145 12.6631L7 11.2L2.8855 12.6631L3.00556 8.29787L0.342604 4.83688L4.5313 3.60213L7 0Z" />
                    </svg>
                    <svg class="w-6 fill-[#CED5D8]" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path
                        d="M7 0L9.4687 3.60213L13.6574 4.83688L10.9944 8.29787L11.1145 12.6631L7 11.2L2.8855 12.6631L3.00556 8.29787L0.342604 4.83688L4.5313 3.60213L7 0Z" />
                    </svg>
                    <svg class="w-6 fill-[#CED5D8]" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path
                        d="M7 0L9.4687 3.60213L13.6574 4.83688L10.9944 8.29787L11.1145 12.6631L7 11.2L2.8855 12.6631L3.00556 8.29787L0.342604 4.83688L4.5313 3.60213L7 0Z" />
                    </svg>
                    <p class="text-xl font-bold text-gray-400 !ml-4">3.0</p>
                  </div>


                  <!-- /////////// -->






                  <!-- Add to Cart Button -->

                  <% const totalVariantStock = (product.variants || []).reduce((s,v)=> s + (v.stock||0), 0); %>
                  <% if (totalVariantStock===0) { %>
                    <p class="mt-2 font-medium text-red-400">Out of stock</p>
                    <% }%>
                    <% if(totalVariantStock< 6 && totalVariantStock>0){%>
                    <p class="text-green-500 font-medium">Only <%= totalVariantStock %> product left</p>
                    <% } %>
                      <a id="goCart">
                        <button type="button" id="addToCart" class="w-full mt-8 px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white text-sm font-semibold rounded-md
                         disabled:bg-gray-400 disabled:cursor-not-allowed disabled:hover:bg-gray-400"
                          <%= totalVariantStock===0 ? 'disabled' : '' %>
                          >
                          Add to cart
                        </button>
                      </a>


                      <!-- Product Description -->
                      <div class="mt-8">
                        <h3 class="text-xl font-bold text-gray-800">About the item</h3>
                        <ul class="space-y-3 list-disc mt-4 pl-4 text-sm text-gray-800">
                          <li>
                            <%=product.description %>
                          </li>
                          <li>100% Original Products</li>
                          <li>Pay on delivery might be available</li>
                          <li>Easy 14 days returns and exchanges</li>
                        </ul>
                      </div>
   






                </div>
      </div>
    </div>
  </div>

  <section>
    <div class="font-sans p-4 mx-auto lg:max-w-5xl md:max-w-3xl sm:max-w-full">
  
      <h2 class="text-lg  lg:text-2xl font-extrabold text-gray-800 mb-12">All products</h2>
  
      <div class="grid grid-cols-2  sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <% products.forEach(product=>{%>
          <!-- <a href="/user/productView/<%=product._id %>"> -->
          <div id="product"
            class="bg-white rounded overflow-hidden shadow-md cursor-pointer hover:scale-[1.02] transition-all">
            <div class="w-full aspect-w-4 aspect-h-3 lg:h-60">
              <img src="<%=product.images[0] %>" alt="Product 1" class="h-full w-full object-cover object-top" />
            </div>
  
            <div class="p-4">
              <h3 class="text-sm lg:text-lg font-bold text-gray-800">
                <%=product.productName %>
              </h3>
              <p class="text-sm lg:text-lg">
                <%=product.description %>
              </p>
              <div class="mt-4 flex items-center flex-wrap gap-2">
                <h4 class="text-lg font-bold text-gray-800">₹<%=product.price %>
                </h4>
                <h4 class="text-lg font-light line-through text-red-500">
                  <%=product.discount %>%
                </h4>
                <!-- <a href="/user/addToWishlist" > -->
                <!-- <div class="float-right"> -->
                  <div id="Wishlist"
                    class="bg-gray-100 p-1 w-10 h-10 flex items-center   rounded-full cursor-pointer">

                        <% if (wishlistProduct.some(item=> item.productId.equals(product._id))) { %>

                          <svg  width="300px"   height="500px" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
                            <path fill="#FF0000" d="M480.25 156.355c0 161.24-224.25 324.43-224.25 324.43S31.75 317.595 31.75 156.355c0-91.41 70.63-125.13 107.77-125.13 77.65 0 116.48 65.72 116.48 65.72s38.83-65.73 116.48-65.73c37.14.01 107.77 33.72 107.77 125.14z" />
                          </svg>
                          
                            <% } else { %>
                            
                              <svg width="300px" height="500px" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path fill="#E0E0E0" 
                                d="M480.25 156.355c0 161.24-224.25 324.43-224.25 324.43S31.75 317.595 31.75 156.355c0-91.41 70.63-125.13 107.77-125.13 77.65 0 116.48 65.72 116.48 65.72s38.83-65.73 116.48-65.73c37.14.01 107.77 33.72 107.77 125.14z"/></svg>
  
                                <% } %>
  
                                <div id="productID" class="hidden">
                                  <%=product._id %>
                                </div>
                         
                      </div>
                    <!-- </div> -->
                      <!-- </a> -->
  
                  </div>
              </div>
            </div>
            <!-- </a> -->
            <%}) %>
  
            <div>
              <input type="text" value="<%=product._id %>" id="productId" hidden>
            </div>
  
  
          </div>
      </div>
  
  </section>


  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

  <script>


    // Get the main image and all thumbnail images
    const mainImage = document.getElementById("mainImage");
    const thumbnails = document.querySelectorAll(".product-thumb");
    const result = document.getElementById('myresult');

    // Add click event to each thumbnail to change the main image
    thumbnails.forEach((thumbnail) => {
      thumbnail.addEventListener("click", () => { 
        mainImage.src = thumbnail.src;
        const result = document.getElementById('myresult');
        result.style.backgroundImage = thumbnail.src; // Update zoom result
      });
    });
    // Initiate zoom effect:


    document.getElementById('img-zoom-container').addEventListener('mouseenter', () => {
      const result = document.getElementById('myresult');
      result.classList.remove('hidden')
      imageZoom("mainImage", "myresult");
    })
    document.getElementById('img-zoom-container').addEventListener('mouseleave', () => {
      result.classList.add('hidden')
      document.getElementById("imageZoom").remove()

    })


    let selectSize=""
    let selectColor=""
    const variants = JSON.parse('<%- JSON.stringify(product.variants || []) %>')

    function updateAvailability() {
      // compute availability based on current selections
      const sizeButtons = document.querySelectorAll('input[name="selectedSize"]');
      const colorButtons = document.querySelectorAll('.variant-color');
      const stockMsg = document.getElementById('variantStockMsg');

      // Filter size availability when a color is selected
      sizeButtons.forEach(input => {
        const size = input.value;
        const available = selectColor
          ? variants.some(v => v.size === size && v.color === selectColor && Number(v.stock) > 0)
          : variants.some(v => v.size === size && Number(v.stock) > 0);
        const pill = input.nextElementSibling;
        if (!available) {
          input.disabled = true;
          pill.classList.add('opacity-40','cursor-not-allowed');
        } else {
          input.disabled = false;
          pill.classList.remove('opacity-40','cursor-not-allowed');
        }
      });

      // Filter color availability when a size is selected
      colorButtons.forEach(btn => {
        const color = btn.getAttribute('data-color');
        const available = selectSize
          ? variants.some(v => v.color === color && v.size === selectSize && Number(v.stock) > 0)
          : variants.some(v => v.color === color && Number(v.stock) > 0);
        if (!available) {
          btn.disabled = true;
          btn.classList.add('opacity-40','cursor-not-allowed');
        } else {
          btn.disabled = false;
          btn.classList.remove('opacity-40','cursor-not-allowed');
        }
      });

      // Show stock for exact match
      let matched = null;
      if (selectSize && selectColor) {
        matched = variants.find(v => v.size === selectSize && v.color === selectColor);
      }
      if (matched) {
        const s = Number(matched.stock||0);
        if (s > 0) {
          stockMsg.textContent = `In stock: ${s}`;
          stockMsg.className = 'mt-2 text-sm font-medium text-green-600';
          document.getElementById('addToCart').disabled = false;
        } else {
          stockMsg.textContent = 'Out of stock';
          stockMsg.className = 'mt-2 text-sm font-medium text-red-500';
          document.getElementById('addToCart').disabled = true;
        }
      } else {
        stockMsg.textContent = '';
        // disable Add to cart if no valid selection
        const anyAvailable = variants.some(v => Number(v.stock) > 0);
        document.getElementById('addToCart').disabled = !anyAvailable;
      }
    }
    // handle size select and allow unselecting the same size
    document.querySelectorAll('input[name="selectedSize"]').forEach(input => {
      const pill = input.nextElementSibling;
      // unselect if clicking the already selected pill
      pill.addEventListener('click', (e) => {
        if (input.checked) {
          e.preventDefault();
          input.checked = false;
          selectSize = "";
          updateAvailability();
        }
      });
      input.addEventListener('change', () => {
        const checked = document.querySelector('input[name="selectedSize"]:checked');
        selectSize = checked ? checked.value : "";
        updateAvailability();
      });
    });

    // handle color select
    document.querySelectorAll('.variant-color').forEach(btn => {
      btn.addEventListener('click', () => {
        const isSelected = btn.classList.contains('bg-blue-600');
        if (isSelected) {
          // unselect color
          btn.classList.remove('bg-blue-600','text-white','border-blue-600');
          selectColor = "";
        } else {
          // select new color
          document.querySelectorAll('.variant-color').forEach(b => b.classList.remove('bg-blue-600','text-white','border-blue-600'))
          btn.classList.add('bg-blue-600','text-white','border-blue-600')
          selectColor = btn.getAttribute('data-color')
        }
        updateAvailability();
      })
    })
    // initialize availability state on load
    updateAvailability();
      let clicked=false
    document.getElementById("addToCart").addEventListener("click", () => {
      document.getElementById("selectErr").textContent = ""
      const productId = document.getElementById("productId").value
      if(clicked) return
      clicked=true

      if (selectSize && selectColor) {
        console.log(selectSize);
        
        axios.post("/user/addToCart", { productId , selectSize, selectColor}).then(data => {
          console.log(data);  
          Swal.fire({
            position: "center",
            icon: "success",
            title: "Product added to the Cart",
            showConfirmButton: false,
            timer: 1500
          });
          document.getElementById("addToCart").textContent = "GO TO CART"
          document.getElementById("goCart").href = "/user/showCart"
        })
          .catch(data => {
            document.getElementById("addToCart").textContent = "GO TO CART"
            document.getElementById("goCart").href = "/user/showCart"
          setTimeout(()=>{ Swal.fire("Already added to the Cart "),1000})
          
          })
      } else {
        document.getElementById("selectErr").textContent = "Select size and color*"
      }
    })


  </script>
  
<script>
  function imageZoom(imgID, resultID) {
    var img, lens, result, cx, cy;
    img = document.getElementById(imgID);
    result = document.getElementById(resultID);
    /*create lens:*/
    lens = document.createElement("DIV");
    
    lens.setAttribute("class", "img-zoom-lens");
    lens.setAttribute("id",'imageZoom');
    /*insert lens:*/
    img.parentElement.insertBefore(lens, img);
    /*calculate the ratio between result DIV and lens:*/
    cx = result.offsetWidth / lens.offsetWidth;
    cy = result.offsetHeight / lens.offsetHeight;
    /*set background properties for the result DIV:*/
    result.style.backgroundImage = "url('" + img.src + "')";
    result.style.backgroundSize = (img.width * cx) + "px " + (img.height * cy) + "px";
    /*execute a function when someone moves the cursor over the image, or the lens:*/
    lens.addEventListener("mousemove", moveLens);
    img.addEventListener("mousemove", moveLens);
    /*and also for touch screens:*/
    lens.addEventListener("touchmove", moveLens);
    img.addEventListener("touchmove", moveLens);
    function moveLens(e) {
      var pos, x, y;
      /*prevent any other actions that may occur when moving over the image:*/
      e.preventDefault();
      /*get the cursor's x and y positions:*/
      pos = getCursorPos(e);
      /*calculate the position of the lens:*/
      x = pos.x - (lens.offsetWidth / 2);
      y = pos.y - (lens.offsetHeight / 2);
      /*prevent the lens from being positioned outside the image:*/
      if (x > img.width - lens.offsetWidth) { x = img.width - lens.offsetWidth; }
      if (x < 0) { x = 0; }
      if (y > img.height - lens.offsetHeight) { y = img.height - lens.offsetHeight; }
      if (y < 0) { y = 0; }
      /*set the position of the lens:*/
      lens.style.left = x + "px";
      lens.style.top = y + "px";
      /*display what the lens "sees":*/
      result.style.backgroundPosition = "-" + (x * cx) + "px -" + (y * cy) + "px";
    }
    function getCursorPos(e) {
      var a, x = 0, y = 0;
      e = e || window.event;
      /*get the x and y positions of the image:*/
      a = img.getBoundingClientRect();
      /*calculate the cursor's x and y coordinates, relative to the image:*/
      x = e.pageX - a.left;
      y = e.pageY - a.top;
      /*consider any page scrolling:*/
      x = x - window.pageXOffset;
      y = y - window.pageYOffset;
      return { x: x, y: y };
    }
  }

//for wishilst

document.querySelectorAll("#product").forEach(results=>results.addEventListener("click",()=>{
const productID= results.querySelector("#productID").innerHTML.trim()
window.location.href=`/user/productView/${productID}`
console.log("outer");
console.log(productID);
}))
document.querySelectorAll("#Wishlist").forEach(results=>results.addEventListener("click",function(event){
  event.stopPropagation();
      const productID= results.querySelector("#productID").innerHTML.trim()

      axios.post("/user/addToWhishlist",{productID}).then(response=>{

        event.target.setAttribute("fill","#FF0000")   

        const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.onmouseenter = Swal.stopTimer;
          toast.onmouseleave = Swal.resumeTimer;
        }
      });
      Toast.fire({
        icon: "success",
        title: "product added to wishlist"
      });

    })
    .catch(err => { 

      const Toast = Swal.mixin({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
          toast.onmouseenter = Swal.stopTimer;
          toast.onmouseleave = Swal.resumeTimer;
        }
      });
      Toast.fire({
        icon: "info",
        title: "already added wishlist"
      });

    })
  }))
/////////////////////////////////////////////////////////////////////////////////////////////






</script>
